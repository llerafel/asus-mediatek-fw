version: 2.1

# Re-usable blocks to reduce boilerplate in job definitions.
references:
  default_machine_job: &default_machine_job
    machine: true
    working_directory: ~/workdir
    environment:
      CHANGELOG_FILE: "/tmp/CHANGELOG"
      PROFILE: "dsl-n10-d1"
      PROJECT_DIR: "/build"
jobs:
  build:
    <<: *default_machine_job
    steps:
      - checkout
      - run:
          name: Set Version from TAG 
          shell: /bin/bash
          command: |
            if [ -z "${CIRCLE_TAG}" ]; then
              echo "Nothing to do. Not a release."
            else
              MAJOR_VER=$(echo "${CIRCLE_TAG}" | sed -E 's/([0-9.]*)[_-]?(.*)/\1/')
              MINOR_VER=$(echo "${CIRCLE_TAG}" | sed -E 's/([0-9.]*)[_-]?(.*)/\2/')
              #TODO Set the version somewhere
            fi
      - run:
          name: Generate changelog (only for tags)
          command: |
            REGXP_TO_MATCH=.*gnuton.*
            if [[ ${CIRCLE_TAG} =~ ${REGXP_TO_MATCH} ]]; then
              CURRENT_TAG=${CIRCLE_TAG}
              PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -vE "snapshot|beta|alpha|${CIRCLE_TAG}" | grep ${REGXP_TO_MATCH} | head -n 1)
              echo "Generating logs between the tags ${PREVIOUS_TAG} and ${CURRENT_TAG}"
              echo "Changes from the latest stable gnuton build (${PREVIOUS_TAG}):" > "${CHANGELOG_FILE}"
              git log ${PREVIOUS_TAG}...${CURRENT_TAG} --pretty=format:'* %s' --reverse | grep -vE 'Merge branch|ci:|Bump' >> "${CHANGELOG_FILE}"
              cat "${CHANGELOG_FILE}"
            else
              echo "No changelog to generate. Changelog is generated only for tags matching ${REGXP_TO_MATCH}";
            fi;  
      - run:
          name: Build firmware
          command: |
            docker run -it -u root -e PROFILE="${PROFILE}" -v $PWD:/build gnuton/asus-mediatek-toolchains-docker:latest make
      - run:
          name: Prepare workspace
          command: |
            ls
            pwd
            mkdir -p workspace/release
            cp ./Project/images/* workspace/release
            if [ -z "${CIRCLE_TAG}" ]; then
              echo "No CHANGELOG to copy. Not a release build."
            else
              cp "${CHANGELOG_FILE}" workspace/release
            fi           
      - persist_to_workspace:
          root: workspace
          paths:
            - release
  publish-manifest-and-notes:
    docker:
      - image: cibuilds/github:latest
    steps:
      - attach_workspace:
          at: workspace
      - add_ssh_keys:
          fingerprints:
            - "92:8c:58:f4:aa:44:98:aa:2f:ac:bc:8b:a5:de:f5:c2"
      - run:
          name: "Publish manifest and release note for the current build"
          command: |
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git config --global user.email "bot@gnuton.org"
            git config --global user.name "Circle CI BOT"
            git config --global push.default simple
            git clone -b master --single-branch git@github.com:gnuton/asuswrt-merlin.ng.git
            cd asuswrt-merlin.ng
            UPDATE_DIR=updates
            MAJOR_VER=$(echo "${CIRCLE_TAG}" | sed -E 's/([0-9.]*)[_-]?(.*)/\1/')
            MINOR_VER=$(echo "${CIRCLE_TAG}" | sed -E 's/([0-9.]*)[_-]?(.*)/\2/')
            RELEASE_NOTE_FILE=$(echo "${MAJOR_VER}_${MINOR_VER}_note.txt" | sed "s/\./_/")
            echo "Generating manifest file..."
            echo "DSL-AC68U#FW${MAJOR_VER}#EXT${MINOR_VER}#BETAFW0#BETAEXT0#" > ${UPDATE_DIR}/manifest.txt
            cp $HOME/project/workspace/release/CHANGELOG ${UPDATE_DIR}/"${RELEASE_NOTE_FILE}"
            echo "Uploading to github manifest and ${RELEASE_NOTE_FILE}"
            git add ${UPDATE_DIR}
            git commit -m "Updating Notes and manifest to version:${MAJOR_VER} ${MINOR_VER} [ci skip]" -a
            git push origin
  publish-github-release:
    docker:
      - image: cibuilds/github:latest
    steps:
      - attach_workspace:
          at: workspace
      - run: ls workspace/release
      - run:
          name: "Publish Release on Github"
          command: |
            echo "Uploading release..."
            RELEASE_TITLE="Stable: ${CIRCLE_TAG}"
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete -n "${RELEASE_TITLE}" -b "$(cat workspace/release/CHANGELOG)" ${CIRCLE_TAG} workspace/release/
  publish-github-ci-pre-release:
    docker:
      - image: cibuilds/github:latest
    steps:
      - attach_workspace:
          at: workspace
      - run: ls workspace/release
      - run:
          name: "Publish CI pre-release on Github"
          command: |
            echo "Uploading CI pre-release..."
            RELEASE_TITLE="Unstable: ${CIRCLE_TAG}"
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -n "${RELEASE_TITLE}" -b "$(cat workspace/release/CHANGELOG)" -delete -prerelease ${CIRCLE_TAG} workspace/release/
 
workflows:
  version: 2
  build_and_release:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
               - master
      - publish-manifest-and-notes:
          filters:
            tags:
              only: /[0-9]+.*gnuton[0-9]+/
            branches:
              ignore: /.*/
          requires:
            - build
      - publish-github-release:
          filters:
            tags:
              only: /[0-9]+.*gnuton[0-9]+/
            branches:
              ignore: /.*/
          requires:
            - build
            - publish-manifest-and-notes
      - publish-github-ci-pre-release:
          filters:
            tags:
              only: 
               - /gnuton-snapshot-.*/
               - /[0-9]+.*gnuton[0-9]+_.*beta[0-9]+/
               - /[0-9]+.*gnuton[0-9]+_.*alpha[0-9]+/
            branches:
              ignore: /.*/
          requires:
            - build
notify:
  webhooks:
    - url: https://webhooks.gitter.im/e/8ba8b4d8cd66645df67a
